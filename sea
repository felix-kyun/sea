#!/usr/bin/env bash

# sea
# helper script to manage sub programs

CURRENT_DIR=$(dirname "$(readlink -f "$0")")

_install() {
    local target_path
    local script_path

    target_path="/usr/local/bin/sea"
    script_path=$(readlink -f "$0")

    if [[ -f "$target_path" ]]; then
        echo "Error: $target_path already exists."

        echo -n "Remove and install it ? (yes/no) "
        read -r answer
        case "$answer" in
        [Yy][Ee][Ss] | [Yy]*) ;;
        *)
            echo "Installation aborted."
            exit 1
            ;;
        esac

        sudo rm -f "$target_path" || {
            echo "Error: Unable to remove existing $target_path"
            exit 1
        }
    fi

    sudo ln -s "$script_path" "$target_path" || {
        echo "Error: Unable to copy script to $target_path"
        exit 1
    }

    sudo chmod +x "$target_path" || {
        echo "Error: Unable to make $target_path executable"
        exit 1
    }

    echo "sea utility installed successfully at $target_path"
}

_help() {
    echo "Usage: sea [command | sub_program] [args]"
    echo "Commands:"
    echo "  <sub_program>           - Launch a sub program (e.g., sea panel)"
    echo "  <sub_program> <command> - Run a specific command in the sub program"
    echo "  killall                 - Kill all sea processes"
    echo "  install                 - Install the sea utility"
    echo "  uninstall               - Remove the sea utility"
    echo "  help, --help, -h        - Show this help message"
    exit 0
}

_uninstall() {
    local target_path

    target_path="/usr/local/bin/sea"

    if [[ -f "$target_path" ]]; then
        sudo rm -f "$target_path" || {
            echo "Error: Unable to remove $target_path"
            exit 1
        }
        echo "sea utility removed successfully from $target_path"
    else
        echo "Error: $target_path does not exist."
        exit 1
    fi
}

_killall() {
    ps aux | awk "/.*bash.*sea.*$/ { print \$2 }" | xargs kill
}

_run() {
    local cmd

    cmd="${CURRENT_DIR}/${1}/commands.sh"
    if [[ -f "${cmd}" ]]; then
        source "${CURRENT_DIR}/${1}/commands.sh"
    else
        echo "Sub program doesnt allow any commands"
        exit 1
    fi

    if [[ -z "$2" ]]; then
        if declare -F "_launch" >/dev/null; then
            # try to kill if it exsists
            if declare -F "_kill" >/dev/null; then
                "_kill"
            fi

            _launch
            exit 0
        else
            echo "No launch command found in ${1} sub program"
            exit 1
        fi
    fi

    if declare -F "_$2" >/dev/null; then
        "_$2" "${@:3}"
    else
        echo "Command '$2' not found in ${1} sub program"
        exit 1
    fi
}

case "$1" in
install)
    _install "$0"
    ;;
uninstall)
    _uninstall
    ;;
help | --help | -h)
    _help
    ;;
*)
    if [[ ! -d "${CURRENT_DIR}/${1}" ]]; then
        echo "Sub program not found"
        _help
    fi

    _run "$1" "${@:2}"
    ;;
esac
